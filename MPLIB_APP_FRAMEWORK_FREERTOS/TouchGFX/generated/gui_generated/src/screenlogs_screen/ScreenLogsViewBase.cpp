/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screenlogs_screen/ScreenLogsViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

ScreenLogsViewBase::ScreenLogsViewBase() :
    frameCountInteraction1Interval(0),
    frameCountInteraction2Interval(0),
    frameCountLED_ToggleInterval(0),
    frameCountUpdateUIInterval(0),
    buttonCallback(this, &ScreenLogsViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 240, 240);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    Background.setPosition(0, 0, 240, 240);
    Background.setColor(touchgfx::Color::getColorFromRGB(230, 234, 250));
    Background.setBorderColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    Background.setBorderSize(3);
    add(Background);

    screenTitle.setXY(0, 0);
    add(screenTitle);

    PagesMenu.setXY(0, 40);
    PagesMenu.setPageIndicatorBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SWIPECONTAINER_MEDIUM_OFF_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SWIPECONTAINER_MEDIUM_ON_ACTIVE_ID));
    PagesMenu.setPageIndicatorXY(70, 171);
    PagesMenu.setSwipeCutoff(50);
    PagesMenu.setEndSwipeElasticWidth(50);

    Welcome.setWidth(240);
    Welcome.setHeight(200);
    textArea1.setXY(46, 22);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_85SS));
    Welcome.add(textArea1);

    textArea2.setXY(97, 87);
    textArea2.setColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    textArea2.setLinespacing(0);
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HACC));
    Welcome.add(textArea2);

    systemDescriptionTextArea.setXY(56, 132);
    systemDescriptionTextArea.setColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    systemDescriptionTextArea.setLinespacing(0);
    Unicode::snprintf(systemDescriptionTextAreaBuffer, SYSTEMDESCRIPTIONTEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_LCDJ).getText());
    systemDescriptionTextArea.setWildcard(systemDescriptionTextAreaBuffer);
    systemDescriptionTextArea.resizeToCurrentText();
    systemDescriptionTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HD5T));
    Welcome.add(systemDescriptionTextArea);

    PagesMenu.add(Welcome);

    Memory.setWidth(240);
    Memory.setHeight(200);
    numberOfLogListDrawables.setXY(14, 10);
    numberOfLogListDrawables.setColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    numberOfLogListDrawables.setLinespacing(0);
    Unicode::snprintf(numberOfLogListDrawablesBuffer, NUMBEROFLOGLISTDRAWABLES_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NHL1).getText());
    numberOfLogListDrawables.setWildcard(numberOfLogListDrawablesBuffer);
    numberOfLogListDrawables.resizeToCurrentText();
    numberOfLogListDrawables.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0A4I));
    Memory.add(numberOfLogListDrawables);

    numberOfLogListItems.setXY(122, 10);
    numberOfLogListItems.setColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    numberOfLogListItems.setLinespacing(0);
    Unicode::snprintf(numberOfLogListItemsBuffer, NUMBEROFLOGLISTITEMS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_RHXE).getText());
    numberOfLogListItems.setWildcard(numberOfLogListItemsBuffer);
    numberOfLogListItems.resizeToCurrentText();
    numberOfLogListItems.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8Q8R));
    Memory.add(numberOfLogListItems);

    numberLogsDataServices.setXY(127, 38);
    numberLogsDataServices.setColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    numberLogsDataServices.setLinespacing(0);
    Unicode::snprintf(numberLogsDataServicesBuffer, NUMBERLOGSDATASERVICES_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_Y1H3).getText());
    numberLogsDataServices.setWildcard(numberLogsDataServicesBuffer);
    numberLogsDataServices.resizeToCurrentText();
    numberLogsDataServices.setTypedText(touchgfx::TypedText(T___SINGLEUSE_E30B));
    Memory.add(numberLogsDataServices);

    memHeapFreeSize.setXY(13, 83);
    memHeapFreeSize.setColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    memHeapFreeSize.setLinespacing(0);
    Unicode::snprintf(memHeapFreeSizeBuffer, MEMHEAPFREESIZE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_G84X).getText());
    memHeapFreeSize.setWildcard(memHeapFreeSizeBuffer);
    memHeapFreeSize.resizeToCurrentText();
    memHeapFreeSize.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CM19));
    Memory.add(memHeapFreeSize);

    memHeapLargest.setXY(14, 108);
    memHeapLargest.setColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    memHeapLargest.setLinespacing(0);
    Unicode::snprintf(memHeapLargestBuffer, MEMHEAPLARGEST_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_ZB3V).getText());
    memHeapLargest.setWildcard(memHeapLargestBuffer);
    memHeapLargest.resizeToCurrentText();
    memHeapLargest.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5N8E));
    Memory.add(memHeapLargest);

    memHeapSmalest.setXY(13, 135);
    memHeapSmalest.setColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    memHeapSmalest.setLinespacing(0);
    Unicode::snprintf(memHeapSmalestBuffer, MEMHEAPSMALEST_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8OLZ).getText());
    memHeapSmalest.setWildcard(memHeapSmalestBuffer);
    memHeapSmalest.resizeToCurrentText();
    memHeapSmalest.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0MRP));
    Memory.add(memHeapSmalest);

    memHeapFreeBlocks.setXY(124, 186);
    memHeapFreeBlocks.setColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    memHeapFreeBlocks.setLinespacing(0);
    Unicode::snprintf(memHeapFreeBlocksBuffer, MEMHEAPFREEBLOCKS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_WQNG).getText());
    memHeapFreeBlocks.setWildcard(memHeapFreeBlocksBuffer);
    memHeapFreeBlocks.resizeToCurrentText();
    memHeapFreeBlocks.setTypedText(touchgfx::TypedText(T___SINGLEUSE_38OA));
    memHeapFreeBlocks.setVisible(false);
    Memory.add(memHeapFreeBlocks);

    memHeapEverFree.setXY(126, 135);
    memHeapEverFree.setColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    memHeapEverFree.setLinespacing(0);
    Unicode::snprintf(memHeapEverFreeBuffer, MEMHEAPEVERFREE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_OHU5).getText());
    memHeapEverFree.setWildcard(memHeapEverFreeBuffer);
    memHeapEverFree.resizeToCurrentText();
    memHeapEverFree.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LUQY));
    Memory.add(memHeapEverFree);

    memHeapAllocSuccess.setXY(125, 108);
    memHeapAllocSuccess.setColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    memHeapAllocSuccess.setLinespacing(0);
    Unicode::snprintf(memHeapAllocSuccessBuffer, MEMHEAPALLOCSUCCESS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_4RS1).getText());
    memHeapAllocSuccess.setWildcard(memHeapAllocSuccessBuffer);
    memHeapAllocSuccess.resizeToCurrentText();
    memHeapAllocSuccess.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CWCT));
    Memory.add(memHeapAllocSuccess);

    memHeapFreeSuccess.setXY(124, 83);
    memHeapFreeSuccess.setColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    memHeapFreeSuccess.setLinespacing(0);
    Unicode::snprintf(memHeapFreeSuccessBuffer, MEMHEAPFREESUCCESS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NLIA).getText());
    memHeapFreeSuccess.setWildcard(memHeapFreeSuccessBuffer);
    memHeapFreeSuccess.resizeToCurrentText();
    memHeapFreeSuccess.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6MCN));
    Memory.add(memHeapFreeSuccess);

    PagesMenu.add(Memory);

    Secure.setPosition(1, 0, 239, 160);
    Secure.setScrollbarsColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    Secure.setScrollbarsAlpha(255);
    Secure.setScrollbarsPermanentlyVisible();
    PagesMenu.add(Secure);

    Logs.setWidth(240);
    Logs.setHeight(200);
    LogsListe.setXY(0, 0);
    Logs.add(LogsListe);

    PagesMenu.add(Logs);

    Network.setWidth(240);
    Network.setHeight(200);
    Network.setVisible(false);
    PagesMenu.add(Network);

    PagesMenu.setSelectedPage(1);
    add(PagesMenu);

    StatusNavigationBar1.setXY(0, 200);
    add(StatusNavigationBar1);

    screenLight.setXY(208, 209);
    screenLight.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_OFF_PRESSED_ID));
    screenLight.forceState(true);
    screenLight.setAction(buttonCallback);
    add(screenLight);
}

ScreenLogsViewBase::~ScreenLogsViewBase()
{

}

void ScreenLogsViewBase::setupScreen()
{
    screenTitle.initialize();
    LogsListe.initialize();
    StatusNavigationBar1.initialize();
    transitionBegins();
}

void ScreenLogsViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &screenLight)
    {
        //SetDisplayColor
        //When screenLight clicked call virtual function
        //Call SetDisplayColor
        SetDisplayColor();
    }
}

void ScreenLogsViewBase::handleTickEvent()
{
    frameCountInteraction1Interval++;
    if(frameCountInteraction1Interval == TICK_INTERACTION1_INTERVAL)
    {
        //Interaction1
        //When every N tick change border color of Background
        //Set RGB border color R:117, G:250, B:142 on Background
        Background.setBorderColor(touchgfx::Color::getColorFromRGB(117, 250, 142));
        Background.invalidate();
        frameCountInteraction1Interval = 0;
    }

    frameCountInteraction2Interval++;
    if(frameCountInteraction2Interval == TICK_INTERACTION2_INTERVAL)
    {
        //Interaction2
        //When every N tick change border color of Background
        //Set RGB border color R:57, G:147, B:250 on Background
        Background.setBorderColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
        Background.invalidate();
        frameCountInteraction2Interval = 0;
    }

    frameCountLED_ToggleInterval++;
    if(frameCountLED_ToggleInterval == TICK_LED_TOGGLE_INTERVAL)
    {
        //LED_Toggle
        //When every N tick call virtual function
        //Call LED_Toggle
        LED_Toggle();
        frameCountLED_ToggleInterval = 0;
    }

    frameCountUpdateUIInterval++;
    if(frameCountUpdateUIInterval == TICK_UPDATEUI_INTERVAL)
    {
        //UpdateUI
        //When every N tick call virtual function
        //Call UpdateUI
        UpdateUI();
        frameCountUpdateUIInterval = 0;
    }
}

void ScreenLogsViewBase::afterTransition()
{
    //updateSystemDescription
    //When screen transition ends call virtual function
    //Call updateSystemDescription
    updateSystemDescription();
}

void ScreenLogsViewBase::transitionBegins()
{
    //UpdateStatusNavigationBar
    //When screen transition begins call virtual function
    //Call UpdateStatusNavigationBar
    UpdateStatusNavigationBar();

    //UpdateTitle
    //When screen transition begins call virtual function
    //Call UpdateTitle
    UpdateTitle();
}
