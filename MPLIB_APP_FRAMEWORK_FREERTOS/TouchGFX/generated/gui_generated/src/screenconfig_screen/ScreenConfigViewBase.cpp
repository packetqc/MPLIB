/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screenconfig_screen/ScreenConfigViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

ScreenConfigViewBase::ScreenConfigViewBase() :
    updateItemCallback(this, &ScreenConfigViewBase::updateItemCallbackHandler),
    flexButtonCallback(this, &ScreenConfigViewBase::flexButtonCallbackHandler),
    buttonCallback(this, &ScreenConfigViewBase::buttonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 240, 240);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    layoutConfig.setPosition(0, 0, 240, 240);
    BackgroundScreenConfig.setPosition(0, 0, 240, 240);
    BackgroundScreenConfig.setColor(touchgfx::Color::getColorFromRGB(230, 234, 250));
    BackgroundScreenConfig.setBorderColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    BackgroundScreenConfig.setBorderSize(3);
    layoutConfig.add(BackgroundScreenConfig);

    backgroundTitle.setPosition(1, 0, 240, 65);
    backgroundTitle.setColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    backgroundTitle.setAlpha(75);
    layoutConfig.add(backgroundTitle);

    configList.setPosition(0, 65, 240, 173);
    configList.setHorizontal(false);
    configList.setCircular(false);
    configList.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    configList.setSwipeAcceleration(10);
    configList.setDragAcceleration(10);
    configList.setNumberOfItems(5);
    configList.setPadding(0, 0);
    configList.setSnapping(true);
    configList.setOvershootPercentage(75);
    configList.setDrawableSize(36, 0);
    configList.setDrawables(configListListItems, updateItemCallback);
    layoutConfig.add(configList);

    GoBack.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_LEFT_33_33_38668C_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_LEFT_33_33_E8F6FB_SVG_ID));
    GoBack.setIconXY(0, 0);
    GoBack.setAction(flexButtonCallback);
    GoBack.setPosition(1, 19, 32, 33);
    layoutConfig.add(GoBack);

    line1.setPosition(0, 97, 240, 15);
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    line1.setPainter(line1Painter);
    line1.setStart(0, 0);
    line1.setEnd(240, 0);
    line1.setLineWidth(10);
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
    line1.setAlpha(75);
    line1.setVisible(false);
    layoutConfig.add(line1);

    buttonChangeConfig.setXY(33, 9);
    buttonChangeConfig.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUNDED_PRESSED_ID));
    buttonChangeConfig.setLabelText(touchgfx::TypedText(T___SINGLEUSE_85AV));
    buttonChangeConfig.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonChangeConfig.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 255, 81));
    buttonChangeConfig.setAction(buttonCallback);
    layoutConfig.add(buttonChangeConfig);

    add(layoutConfig);
}

ScreenConfigViewBase::~ScreenConfigViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void ScreenConfigViewBase::setupScreen()
{
    configList.initialize();
    for (int i = 0; i < configListListItems.getNumberOfDrawables(); i++)
    {
        configListListItems[i].initialize();
    }
}

void ScreenConfigViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &GoBack)
    {
        //Interaction1
        //When GoBack clicked change screen to ScreenLogs
        //Go to ScreenLogs with screen transition towards East
        application().gotoScreenLogsScreenSlideTransitionEast();
    }
}

void ScreenConfigViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonChangeConfig)
    {
        //ChangeConfig
        //When buttonChangeConfig clicked change screen to ScreenChangeConfig
        //Go to ScreenChangeConfig with screen transition towards North
        application().gotoScreenChangeConfigScreenSlideTransitionNorth();
    }
}

void ScreenConfigViewBase::afterTransition()
{
    //Interaction2
    //When screen transition ends call virtual function
    //Call function1
    function1();
}

void ScreenConfigViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &configListListItems)
    {
        configListUpdateItem(configListListItems[containerIndex], itemIndex);
    }
}
