/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screenconfig_screen/ScreenConfigViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

ScreenConfigViewBase::ScreenConfigViewBase() :
    updateItemCallback(this, &ScreenConfigViewBase::updateItemCallbackHandler),
    flexButtonCallback(this, &ScreenConfigViewBase::flexButtonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 240, 240);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    BackgroundScreenConfig.setPosition(0, 0, 240, 240);
    BackgroundScreenConfig.setColor(touchgfx::Color::getColorFromRGB(230, 234, 250));
    BackgroundScreenConfig.setBorderColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    BackgroundScreenConfig.setBorderSize(3);
    add(BackgroundScreenConfig);

    screenTitle.setXY(0, 0);
    add(screenTitle);

    configList.setPosition(0, 131, 240, 107);
    configList.setHorizontal(false);
    configList.setCircular(false);
    configList.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    configList.setSwipeAcceleration(10);
    configList.setDragAcceleration(10);
    configList.setNumberOfItems(5);
    configList.setPadding(0, 0);
    configList.setSnapping(true);
    configList.setOvershootPercentage(75);
    configList.setDrawableSize(36, 0);
    configList.setDrawables(configListListItems, updateItemCallback);
    add(configList);

    GoBack.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_LEFT_33_33_38668C_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_LEFT_33_33_E8F6FB_SVG_ID));
    GoBack.setIconXY(0, 0);
    GoBack.setAction(flexButtonCallback);
    GoBack.setPosition(0, 5, 32, 33);
    add(GoBack);

    modeCryptSD.setBoxWithBorderPosition(0, 0, 25, 25);
    modeCryptSD.setBorderSize(1);
    modeCryptSD.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(177, 209, 224), touchgfx::Color::getColorFromRGB(117, 250, 142), touchgfx::Color::getColorFromRGB(177, 209, 224), touchgfx::Color::getColorFromRGB(117, 250, 142));
    modeCryptSD.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_NOTIFICATION_NO_ENCRYPTION_GMAILERRORRED_25_25_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_NOTIFICATION_ENHANCED_ENCRYPTION_25_25_E8F6FB_SVG_ID));
    modeCryptSD.setIconXY(0, 0);
    modeCryptSD.setAction(flexButtonCallback);
    modeCryptSD.setPosition(32, 50, 25, 25);
    add(modeCryptSD);

    modeCryptScreen.setBoxWithBorderPosition(0, 0, 25, 25);
    modeCryptScreen.setBorderSize(1);
    modeCryptScreen.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(177, 209, 224), touchgfx::Color::getColorFromRGB(117, 250, 142), touchgfx::Color::getColorFromRGB(177, 209, 224), touchgfx::Color::getColorFromRGB(117, 250, 142));
    modeCryptScreen.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_NOTIFICATION_NO_ENCRYPTION_GMAILERRORRED_25_25_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_NOTIFICATION_ENHANCED_ENCRYPTION_25_25_E8F6FB_SVG_ID));
    modeCryptScreen.setIconXY(0, 0);
    modeCryptScreen.setAction(flexButtonCallback);
    modeCryptScreen.setPosition(32, 90, 25, 25);
    add(modeCryptScreen);

    labelCryptSD.setXY(74, 53);
    labelCryptSD.setColor(touchgfx::Color::getColorFromRGB(56, 102, 140));
    labelCryptSD.setLinespacing(0);
    labelCryptSD.setTypedText(touchgfx::TypedText(T___SINGLEUSE_S8LO));
    add(labelCryptSD);

    labelCryptScreen.setXY(74, 93);
    labelCryptScreen.setColor(touchgfx::Color::getColorFromRGB(56, 102, 140));
    labelCryptScreen.setLinespacing(0);
    labelCryptScreen.setTypedText(touchgfx::TypedText(T___SINGLEUSE_TOXT));
    add(labelCryptScreen);

    line1.setPosition(0, 124, 240, 15);
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    line1.setPainter(line1Painter);
    line1.setStart(0, 0);
    line1.setEnd(240, 0);
    line1.setLineWidth(10);
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
    line1.setAlpha(75);
    add(line1);

    textArea1.setXY(56, 11);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(57, 147, 250));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_I5LZ));
    add(textArea1);
}

ScreenConfigViewBase::~ScreenConfigViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void ScreenConfigViewBase::setupScreen()
{
    screenTitle.initialize();
    configList.initialize();
    for (int i = 0; i < configListListItems.getNumberOfDrawables(); i++)
    {
        configListListItems[i].initialize();
    }
}

void ScreenConfigViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &GoBack)
    {
        //Interaction1
        //When GoBack clicked change screen to ScreenLogs
        //Go to ScreenLogs with screen transition towards East
        application().gotoScreenLogsScreenSlideTransitionEast();
    }
    if (&src == &modeCryptSD)
    {
        //EncryptOnSD
        //When modeCryptSD clicked call virtual function
        //Call encryptOnSD
        encryptOnSD();
    }
    if (&src == &modeCryptScreen)
    {
        //EncryptOnScreen
        //When modeCryptScreen clicked call virtual function
        //Call encryptOnScreen
        encryptOnScreen();
    }
}

void ScreenConfigViewBase::afterTransition()
{
    //Interaction2
    //When screen transition ends call virtual function
    //Call function1
    function1();
}

void ScreenConfigViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &configListListItems)
    {
        configListUpdateItem(configListListItems[containerIndex], itemIndex);
    }
}
