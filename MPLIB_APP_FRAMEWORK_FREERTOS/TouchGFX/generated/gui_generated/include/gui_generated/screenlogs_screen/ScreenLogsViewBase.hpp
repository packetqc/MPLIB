/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREENLOGSVIEWBASE_HPP
#define SCREENLOGSVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screenlogs_screen/ScreenLogsPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <gui/containers/ScreenTitle.hpp>
#include <touchgfx/containers/SwipeContainer.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <gui/containers/LogPanel.hpp>
#include <gui/containers/StatusNavigationBar.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class ScreenLogsViewBase : public touchgfx::View<ScreenLogsPresenter>
{
public:
    ScreenLogsViewBase();
    virtual ~ScreenLogsViewBase();
    virtual void setupScreen();
    virtual void handleTickEvent();
    virtual void afterTransition();
    virtual void transitionBegins();

    /*
     * Virtual Action Handlers
     */
    virtual void LED_Toggle()
    {
        // Override and implement this function in ScreenLogs
    }
    virtual void updateSystemDescription()
    {
        // Override and implement this function in ScreenLogs
    }
    virtual void UpdateUI()
    {
        // Override and implement this function in ScreenLogs
    }
    virtual void SetDisplayColor()
    {
        // Override and implement this function in ScreenLogs
    }
    virtual void UpdateStatusNavigationBar()
    {
        // Override and implement this function in ScreenLogs
    }
    virtual void UpdateTitle()
    {
        // Override and implement this function in ScreenLogs
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::BoxWithBorder BackgroundScreenLogs;
    ScreenTitle screenTitle;
    touchgfx::SwipeContainer PagesMenu;
    touchgfx::Container Memory;
    touchgfx::TextAreaWithOneWildcard numberOfLogListDrawables;
    touchgfx::TextAreaWithOneWildcard numberOfLogListItems;
    touchgfx::TextAreaWithOneWildcard numberLogsDataServices;
    touchgfx::TextAreaWithOneWildcard memHeapFreeSize;
    touchgfx::TextAreaWithOneWildcard memHeapLargest;
    touchgfx::TextAreaWithOneWildcard memHeapSmalest;
    touchgfx::TextAreaWithOneWildcard memHeapFreeBlocks;
    touchgfx::TextAreaWithOneWildcard memHeapEverFree;
    touchgfx::TextAreaWithOneWildcard memHeapAllocSuccess;
    touchgfx::TextAreaWithOneWildcard memHeapFreeSuccess;
    touchgfx::Container Logs;
    LogPanel LogsListe;
    StatusNavigationBar StatusNavigationBar1;
    touchgfx::IconButtonStyle< touchgfx::ToggleButtonTrigger >  screenLight;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  Status_STORAGE;

    /*
     * Wildcard Buffers
     */
    static const uint16_t NUMBEROFLOGLISTDRAWABLES_SIZE = 10;
    touchgfx::Unicode::UnicodeChar numberOfLogListDrawablesBuffer[NUMBEROFLOGLISTDRAWABLES_SIZE];
    static const uint16_t NUMBEROFLOGLISTITEMS_SIZE = 10;
    touchgfx::Unicode::UnicodeChar numberOfLogListItemsBuffer[NUMBEROFLOGLISTITEMS_SIZE];
    static const uint16_t NUMBERLOGSDATASERVICES_SIZE = 10;
    touchgfx::Unicode::UnicodeChar numberLogsDataServicesBuffer[NUMBERLOGSDATASERVICES_SIZE];
    static const uint16_t MEMHEAPFREESIZE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar memHeapFreeSizeBuffer[MEMHEAPFREESIZE_SIZE];
    static const uint16_t MEMHEAPLARGEST_SIZE = 10;
    touchgfx::Unicode::UnicodeChar memHeapLargestBuffer[MEMHEAPLARGEST_SIZE];
    static const uint16_t MEMHEAPSMALEST_SIZE = 10;
    touchgfx::Unicode::UnicodeChar memHeapSmalestBuffer[MEMHEAPSMALEST_SIZE];
    static const uint16_t MEMHEAPFREEBLOCKS_SIZE = 10;
    touchgfx::Unicode::UnicodeChar memHeapFreeBlocksBuffer[MEMHEAPFREEBLOCKS_SIZE];
    static const uint16_t MEMHEAPEVERFREE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar memHeapEverFreeBuffer[MEMHEAPEVERFREE_SIZE];
    static const uint16_t MEMHEAPALLOCSUCCESS_SIZE = 10;
    touchgfx::Unicode::UnicodeChar memHeapAllocSuccessBuffer[MEMHEAPALLOCSUCCESS_SIZE];
    static const uint16_t MEMHEAPFREESUCCESS_SIZE = 10;
    touchgfx::Unicode::UnicodeChar memHeapFreeSuccessBuffer[MEMHEAPFREESUCCESS_SIZE];

private:

    /*
     * Tick Counter Declarations
     */
    static const uint32_t TICK_INTERACTION1_INTERVAL = 100;
    uint32_t frameCountInteraction1Interval;
    static const uint32_t TICK_INTERACTION2_INTERVAL = 200;
    uint32_t frameCountInteraction2Interval;
    static const uint32_t TICK_LED_TOGGLE_INTERVAL = 57;
    uint32_t frameCountLED_ToggleInterval;
    static const uint32_t TICK_UPDATEUI_INTERVAL = 100;
    uint32_t frameCountUpdateUIInterval;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<ScreenLogsViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // SCREENLOGSVIEWBASE_HPP
