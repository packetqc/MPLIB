/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREENCHANGECONFIGVIEWBASE_HPP
#define SCREENCHANGECONFIGVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screenchangeconfig_screen/ScreenChangeConfigPresenter.hpp>
#include <gui/screenlogininvite_screen/ScreenLoginInviteView.hpp>


#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <gui/containers/ScreenTitle.hpp>
#include <touchgfx/containers/ScrollableContainer.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>

class ScreenChangeConfigViewBase : public touchgfx::View<ScreenChangeConfigPresenter>
{
public:
    ScreenChangeConfigViewBase();
    virtual ~ScreenChangeConfigViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void resetFactory()
    {
        // Override and implement this function in ScreenChangeConfig
    }
    virtual void saveConfig()
    {
        // Override and implement this function in ScreenChangeConfig
    }
    virtual void encryptOnSD()
    {
        // Override and implement this function in ScreenChangeConfig
    }
    virtual void encryptOnScreen()
    {
        // Override and implement this function in ScreenChangeConfig
    }
    virtual void SetDisplayColor()
    {
        // Override and implement this function in ScreenChangeConfig
    }
    virtual void RotateScreen()
    {
        // Override and implement this function in ScreenChangeConfig
    }
    virtual void changePassword()
    {
        // Override and implement this function in ScreenChangeConfig
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::BoxWithBorder Background;
    ScreenTitle screenTitle1;
    touchgfx::ScrollableContainer layoutChangeConfig;
    touchgfx::IconButtonStyle< touchgfx::ToggleButtonTrigger >  screenRotate;
    touchgfx::IconButtonStyle< touchgfx::ToggleButtonTrigger >  screenLight;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ToggleButtonTrigger >  >  modeCryptSD;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ToggleButtonTrigger >  >  modeCryptScreen;
    touchgfx::TextArea labelCryptSD;
    touchgfx::TextArea labelCryptScreen;
    touchgfx::TextArea labelCryptScreenDecrypt;
    touchgfx::TextArea labelLightScreen;
    touchgfx::TextArea labelRotateScreen;
    touchgfx::ButtonWithLabel buttonChangePassword;
    touchgfx::ButtonWithLabel buttonSaveConfig;
    touchgfx::ButtonWithLabel buttonResetFactory;
    touchgfx::TextArea titleChangeConfig;

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<ScreenChangeConfigViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<ScreenChangeConfigViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // SCREENCHANGECONFIGVIEWBASE_HPP
